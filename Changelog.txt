UNRAID Status Screen Changelog:

- v.3.8.3 (2024-12-09)
    - Changed calculation timings to be more accurate
    - Overhauled changelog to make it more readable
    
- v.3.8.2 (2024-09-01)
    - NEW: splash screen no longer needs an absolute path and script defaults to looking in working directory
    - network setting now has new option for monitoring all interfaces (aimed at non UNRAID users)
    - add in logic changes for main script and comments in settings file
    - numerous init-portable.sh fixes

- v.3.8.1
    - Adjusted thread timing calculations
    - Rearranged when settings check occurs during initialization
    - init.sh files now check if the script exists in the same directory
    - various text output changes
    - fix git breaking line endings for init.sh files (thanks git)

- v.3.8 (2024-08-09)
    - NEW: User configuration is no longer hardcoded into this script and is now an external file (yaml)
        - Relevant docstrings have also been removed due to this change
        - Additional logic changes to main script and init.sh to handle this change
    - NEW: Changelog now exists in a separate file (this one), no longer clogging up the script
    - NEW: Project is now tracked with Git and is also now on Github

- v.3.7.3 (2024-06-24)
    - NEW: Plot size now determined by desired time length (eg: 2 minutes) and not exact sample amount (eg: 120)
        - Enforce plot size limits
    - Daily event timer now adjusts based on average loop speed and should get more accurate over time
    - Small debug text tweaks

- v.3.7.2 (2024-06-15)
    - minor text output tweaks
    - NEW: get stats/info of the current process
    - do something more useful with our daily task with stats instead
    - init.sh will skip dependency check if it hasn't been over a month (saves CPU on startup)
    - refactored CPU temp sensor check routine (less spaghetti; the solution was revealed to me while on the toilet)
    - more settings checks and small refactoring

- v.3.7.1 (2024-06-03)
    - Code is mature and has diverged enough (v.3.7) that all active VSCode references are now removed (no more VSCode debug)

- v.3.7 (2024-05-31)
    - This script can now run on other systems that aren't UNRAID, sorta. All thanks to the following init.sh changes:
        - NEW: "portable" version of init.sh that sets up a virtual python environment if run outside of Docker    
        - no more hard-coded locations; init.sh will execute main.py if it's in the same directory
        - environment variables now baked into init.d
        - init.sh now checks for internet when doing setup or package checks and handles no connections accordingly
        - init.sh has proper exit codes now (Docker used to report an exit code 143 when asked to shutdown)
        - NEW: time how long it takes to set things up before actually running python
        - some type hint regressions to run on older python versions
    - Significantly revised and refactored thread timeouts (again)
        - NEW: option to display full render time like how it used to be in v.3.5
        - plot_profiler() will now monitor both threads and allow us to set time outs respectively
        - NEW: more granular stats
        - complicated things with numpy arrays and lists
        - NEW: if threads time out enough times, bumps up baseline values until they don't (up to 4 instances)
        - worker thread time outs no longer kill this script (finally)
        - tighter post-profiled timeouts and clarifed output messages
        - reduced loop pause down to just refresh rate (was refresh rate * 2)
    - NEW: automatically set minimum refresh rate if the system is really slow (determined by setup time)
    - NEW: settings checker will now list available sensors and NIC interfaces if it fails to find any
    - more resiliency against broken python environments and revised error outputs
    - Docker no longer needs environment variables as they're handled both in here and in the init.sh script
    - additional CPU temp fallbacks
    - move external dependency imports to later in the script for better debug in different environments
    - more accurate physical memory usage calculation
    - bigger default font size and legibility improvements for text overlays on plots

- v.3.6.3 (2024-05-26)
    - Autoscaling now sets y minimum to 0
    - NEW: Network plot checks NIC status and will display on screen if down
    - NEW: Parse hostname and local IP and display it on screen
    - on-screen debug text tweaks
    - date stamps when exiting
    - NEW: CPU temp fallback and more user config error handling
    - small code cleanups

- v.3.6.2 (2024-05-14)
    - invoke garbage collection tweaks (probably not necessary)
    - remove redundant axis labelling routine and re-utilize the PLOT_CONFIG setting (includes validation as well)
    - slight change to plot style defaults to match most common process managers (eg. Windows Task Manager)
    - small tweaks to plot text and setting the network plot receive as line 0 (was unchanged from v.1.x)
    - NEW: render frame number into plot if debug enabled
    - cleaner time outputs

- v.3.6.1 (2024-05-06)
    - small tweaks and improvements (envvars and settings parsing, init.sh tweaks again)

- v.3.6 (2024-05-05)
    - display renderer now gets sent to a separate thread
        - add profiling switch to measure either plot generation or display rendering
        - thread timeouts now will consider either the plot or render thread
        - add associated logic changes
    - NEW: init.sh now has a profiling option that will install/summon scalene to profile this script
    - Significant code reorganization and additional logic changes for environment/user settings (extends changes in v.3.5)
    - Set minimum refresh rate to 0.5s (the whole plot update + display render takes ~140ms on a Ryzen 7 5700G at idle)
    - NEW: dropped frame count tracking if render threads timeout
    - verbose output now has a "â€¢" preceeding the message for clarity
    - add barplot colors as part of user config

- v.3.5.1 (2024-05-03)
    - NEW: Render thread timeouts don't kill this script but will just pause the loop for a bit
    - Enhance debug outputs and use stderr for some
    - More init.sh logging tweaks (no more progress bar)
    - Attempt some small processing optimizations

- v.3.5 (2024-04-30)
    - NEW: Add network interface setting due to Unraid having interfaces with duplicate data and showing incorrect info
    - Better byte size parsing and consistent use of IEC binary multipliers
    - More robust and elegant handling of misconfigured settings in user config
    - slight init.sh tweaks
    - Avoid edge case of counters overflowing with long-lived systems (via psutil flags)

- v.3.4.1 (2024-03-14)
    - NEW: check and parse Unraid version
    - fix weird Ftdi output during check
    - fix error handler catching SIGTERM
    - fix edge case where disk activity can be negative
    - add some type hints
    - NEW: rudimentary progress bar in init.sh file

- v.3.4 (2024-03-12)
    - Updated Docker config to no longer require being privileged
        - Docker image will now be able to automatically find the FT232H board
    - Overhaul dependency check output in the init.sh script
        - only logs errors now (less logging junk)
        - NEW: now checks if this is a first run
    - NEW: nice logo in logs
    - better adherence to the Google Python Style Guide

- v.3.3.2 (2024-03-12)
    - updated to use modern matplotlib method for image rendering
    - NEW: logic added in case there's no splash screen image found

- v.3.3.1
    - NEW: thread timeout for rendering now considers CPU load due to low process priority (fancy?)

- v.3.3 (2024-03-11)
    - NEW: added profiling logic to adjust plot rendering timeout based on hardware performance
        - just in case there's a memory leak but that shouldn't happen, right?
    - lowered process priority to near-minimum via Docker (remember, this is just a system resource monitor)
    - moved user-config section to the beginning of script

- v.3.2 (2024-03-10)
    - FIXED: Memory leak due to heatmap and bar graph introduced in v.1.x
    - some more code refactoring

- v.3.1 (2024-03-09)
    - optimizations for string manipulation, improving per-loop times (extra ~10%)
    - more accurate timing info and new sample stat when SIGTERM'd
    - revised debug output on rendered image
    - NEW: verbose changelog

- v.3.0 (2024-03-09)
    - NEW: switch to using ThreadPoolExecutor for better performance (almost 2x speed up)
    - improved docstrings and code readability
    - NEW: better exception handling, settings validation, and timeout checks
    - refactoring to make it easier to switch between debugging in VSCode in Windows and actual hardware (this was for me)

- v.2.1 (2024-03-07)
    - NEW: add debug flags and print stats to screen and log

- v.2.0 (2024-03-06)
    - finalize layout
    - NEW: figure out multithreading and refactor around this

- v.1.x (2024-03-02)
    - learn how to actually code in Python
    - figure out how to use matplotlib correctly
    - determine what resources to monitor
    - initial layout changes for plot
    - how do I VSCode

- v.0.x (2024-02)
    - get this script to actually run in a Docker environment
    - modify the script this is based on for my use
    - NEW: graceful exit for when Docker exits (SIGTERM handler here and in init.sh)
    - NEW: splash screen